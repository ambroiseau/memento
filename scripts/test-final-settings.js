#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://zcyalwewcdgbftaaneet.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpjeWFsd2V3Y2RnYmZ0YWFuZWV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwNTMzNzUsImV4cCI6MjA3MTYyOTM3NX0.5GfuW2uqtbvLfV1nZ9d9uecQnvit1GDZmtD1lGaw3SU'
)

async function testFinalSettings() {
  console.log('üîç Final Settings Test...\n')

  try {
    // Test 1: Profile Update
    console.log('üìù Test 1: Profile Name Update')
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1)
    
    if (profilesError) {
      console.error('‚ùå Profiles query failed:', profilesError.message)
      return
    }

    if (!profiles || profiles.length === 0) {
      console.log('‚ùå No profiles found to test with')
      return
    }

    const profile = profiles[0]
    const originalName = profile.name
    const testName = `Test User ${Date.now()}`
    
    console.log(`‚úÖ Original name: ${originalName}`)
    console.log(`‚úÖ Test name: ${testName}`)
    
    const { data: updatedProfile, error: updateError } = await supabase
      .from('profiles')
      .update({ name: testName })
      .eq('user_id', profile.user_id)
      .select()
      .single()
    
    if (updateError) {
      console.error('‚ùå Profile name update failed:', updateError.message)
    } else {
      console.log('‚úÖ Profile name updated successfully')
      console.log(`‚úÖ New name: ${updatedProfile.name}`)
    }
    console.log()

    // Test 2: Family Name Update
    console.log('üìù Test 2: Family Name Update')
    const { data: families, error: familiesError } = await supabase
      .from('families')
      .select('*')
      .limit(1)
    
    if (familiesError) {
      console.error('‚ùå Families query failed:', familiesError.message)
    } else if (!families || families.length === 0) {
      console.log('‚ùå No families found to test with')
    } else {
      const family = families[0]
      const originalFamilyName = family.name
      const testFamilyName = `Test Family ${Date.now()}`
      
      console.log(`‚úÖ Original family name: ${originalFamilyName}`)
      console.log(`‚úÖ Test family name: ${testFamilyName}`)
      
      const { data: updatedFamily, error: familyUpdateError } = await supabase
        .from('families')
        .update({ name: testFamilyName })
        .eq('id', family.id)
        .select()
        .single()
      
      if (familyUpdateError) {
        console.error('‚ùå Family name update failed:', familyUpdateError.message)
      } else {
        console.log('‚úÖ Family name updated successfully')
        console.log(`‚úÖ New family name: ${updatedFamily.name}`)
      }
    }
    console.log()

    // Test 3: Profile Avatar Update
    console.log('üìù Test 3: Profile Avatar Update')
    const testAvatarUrl = `data:image/svg+xml;base64,${Buffer.from('<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><rect width="100" height="100" fill="blue"/></svg>').toString('base64')}`
    
    const { data: avatarUpdatedProfile, error: avatarUpdateError } = await supabase
      .from('profiles')
      .update({ avatar_url: testAvatarUrl })
      .eq('user_id', profile.user_id)
      .select()
      .single()
    
    if (avatarUpdateError) {
      console.error('‚ùå Profile avatar update failed:', avatarUpdateError.message)
    } else {
      console.log('‚úÖ Profile avatar updated successfully')
      console.log('‚úÖ Avatar URL set:', avatarUpdatedProfile.avatar_url ? 'Yes' : 'No')
    }
    console.log()

    console.log('üéØ Final Settings Test Summary:')
    console.log('‚úÖ Profile name updates work')
    console.log('‚úÖ Family name updates work')
    console.log('‚úÖ Profile avatar updates work')
    console.log('‚ùå Family avatar updates disabled (no avatar field in families table)')
    console.log('‚úÖ Settings refresh mechanism should work in the app')

  } catch (error) {
    console.error('‚ùå Test failed:', error.message)
  }
}

// Run the test
testFinalSettings()
