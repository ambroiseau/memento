#!/usr/bin/env node

// Script pour migrer tous les posts Telegram existants
// en leur donnant l'user_id de l'admin principal
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey =
  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log("‚ùå Variables d'environnement manquantes");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// UUID de l'admin principal
const ADMIN_USER_ID = 'a02767db-c62c-42b0-a89b-a70022c5eca9';

async function migrateTelegramPosts() {
  try {
    console.log('üîÑ Migration des posts Telegram existants...\n');

    // 1. Compter les posts Telegram avec user_id = null
    console.log('1Ô∏è‚É£ Comptage des posts Telegram √† migrer...');
    const { data: postsToMigrate, error: countError } = await supabase
      .from('posts')
      .select('id, content_text, created_at, source_type')
      .eq('source_type', 'telegram')
      .is('user_id', null);

    if (countError) {
      console.log('‚ùå Erreur comptage posts:', countError.message);
      return;
    }

    if (!postsToMigrate || postsToMigrate.length === 0) {
      console.log('‚úÖ Aucun post Telegram √† migrer !');
      return;
    }

    console.log(`üìä Posts Telegram √† migrer: ${postsToMigrate.length}`);

    // 2. Afficher un aper√ßu des posts
    console.log('\n2Ô∏è‚É£ Aper√ßu des posts √† migrer:');
    postsToMigrate.slice(0, 5).forEach((post, index) => {
      console.log(`   ${index + 1}. ID: ${post.id}`);
      console.log(`      Contenu: ${post.content_text || 'Aucun'}`);
      console.log(`      Cr√©√©: ${post.created_at}`);
    });

    if (postsToMigrate.length > 5) {
      console.log(`   ... et ${postsToMigrate.length - 5} autres`);
    }

    // 3. Demander confirmation
    console.log(
      '\n‚ö†Ô∏è  ATTENTION: Cette op√©ration va modifier la base de donn√©es !'
    );
    console.log(`   - ${postsToMigrate.length} posts seront modifi√©s`);
    console.log(`   - user_id sera chang√© de null vers: ${ADMIN_USER_ID}`);
    console.log('\n   Continuer ? (y/N)');

    // En mode script, on continue automatiquement
    console.log('   Mode script - continuation automatique...');

    // 4. Effectuer la migration
    console.log('\n3Ô∏è‚É£ D√©but de la migration...');

    let successCount = 0;
    let errorCount = 0;

    for (const post of postsToMigrate) {
      try {
        console.log(`üîÑ Migration du post ${post.id}...`);

        const { data: updateResult, error: updateError } = await supabase
          .from('posts')
          .update({ user_id: ADMIN_USER_ID })
          .eq('id', post.id)
          .select();

        if (updateError) {
          console.log(`   ‚ùå Erreur: ${updateError.message}`);
          errorCount++;
        } else {
          console.log(`   ‚úÖ Succ√®s: user_id mis √† jour`);
          successCount++;
        }
      } catch (error) {
        console.log(`   ‚ùå Exception: ${error.message}`);
        errorCount++;
      }
    }

    // 5. R√©sum√©
    console.log('\n4Ô∏è‚É£ R√©sum√© de la migration:');
    console.log(`   ‚úÖ Posts migr√©s avec succ√®s: ${successCount}`);
    console.log(`   ‚ùå Erreurs: ${errorCount}`);
    console.log(`   üìä Total trait√©: ${postsToMigrate.length}`);

    // 6. V√©rification
    console.log('\n5Ô∏è‚É£ V√©rification post-migration...');
    const { data: remainingPosts, error: verifyError } = await supabase
      .from('posts')
      .select('id')
      .eq('source_type', 'telegram')
      .is('user_id', null);

    if (verifyError) {
      console.log('‚ùå Erreur v√©rification:', verifyError.message);
    } else {
      console.log(
        `üìä Posts Telegram restants avec user_id = null: ${remainingPosts?.length || 0}`
      );

      if (remainingPosts && remainingPosts.length === 0) {
        console.log('üéâ Tous les posts Telegram ont √©t√© migr√©s avec succ√®s !');
      } else {
        console.log("‚ö†Ô∏è  Certains posts n'ont pas √©t√© migr√©s");
      }
    }

    console.log('\n‚úÖ Migration termin√©e !');
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

migrateTelegramPosts();
