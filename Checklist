# RULES_CURSOR.md — Règles opérationnelles à respecter **toujours**

_"Pose moi des questions au lieu de te lancer dans l'implémentation d'une idée stupide"_

### 1. Structure & Cohérence du code

- **Toujours vérifier la structure de la base de données** (tables, colonnes, relations) dans Supabase avant d’implémenter ou d’utiliser un modèle.  
  _Ne jamais supposer le nom ou la forme d’une table/colonne sans vérification._
- **Avant de créer un nouveau fichier ou module**, vérifier s’il n’existe pas déjà un fichier équivalent (même fonction, nom différent) dans le projet.  
  _Chercher par fonctionnalité, pas seulement par nom attendu._
- **Respecter la structure de dossiers et les conventions de nommage** existantes (voir monorepo, alias, patterns).

### 2. Sécurité & Secrets

- **Ne jamais exposer de secrets** (clé API, JWT, etc.) dans le code, les logs ou les URLs.
- **Pour le déploiement du Telegram ou Slack Webhook** (Supabase Edge) :
  - **Ne jamais exiger ou vérifier de JWT** dans les requêtes entrantes. Déployer la correction avec --no-verify-jwt
  - Utiliser uniquement le secret de webhook Telegram pour la validation.
  - S’assurer que le endpoint n’est pas publicisé inutilement.
- **Toujours vérifier les policies RLS** et les permissions avant de merger une PR qui touche à la sécurité.

### 3. Déploiement & Intégration

- Toujours merger avant de mettre en production, et ne jamais mettre en production sans avoir testé au préalable.
- **Vercel** est utilisé pour le déploiement de l'application (API, webhooks, etc.).
- **Railway** est utilisé pour le déploiement du pdf generator
- **Ne jamais déployer directement sur `main`** sans review et validation CI.
- **Préférer les migrations SQL** pour toute évolution de la base (voir `supabase db diff`).
- **Ne jamais utiliser `supabase db reset` en production** (réservé au local/dev).

### 4. Qualité & Revue

- **Lint, type-check et tests** obligatoires avant toute PR.
- **Pas de génération massive de code** ou de refacto automatique sans plan d’action validé.
- **Ne pas modifier les API publiques** sans versionning ou compatibilité rétroactive.

### 5. Documentation & Communication

- **Documenter toute règle ou exception** dans ce fichier (`RULES_CURSOR.md`).
- **Référencer ce fichier** dans le README et le CONTRIBUTING.
- **Soumettre un plan d’action** (voir section 13) pour toute évolution majeure ou refonte.

---

**Rappel :**  
_“Ne jamais supposer, toujours vérifier.”_  
_“Chercher l’existant avant de créer du nouveau.”_  
_“La sécurité et la cohérence priment sur la rapidité.”_
_"Pose moi des questions au lieu de te lancer dans l'implémentation d'une idée stupide"_
